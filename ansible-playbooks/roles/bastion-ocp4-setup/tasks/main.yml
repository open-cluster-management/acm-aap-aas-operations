
- name: Deploy a template to /etc/motd
  ansible.builtin.template:
    src: motd.j2
    dest: /etc/motd

- name: Customize prompt
  ansible.builtin.template:
    src: prompt.sh.j2
    dest: /etc/profile.d/custom-prompt.sh
    mode: '0755'

- name: Check if secret exists already
  azure.azcollection.azure_rm_keyvaultsecret_info:
    vault_uri: "{{ vault_uri }}"
    name: "acm-sre-{{ ocp4_metadata.clusterName }}-kubeconfig"
  register: result
  no_log: true
  when: vault_uri is defined
  delegate_to: localhost

- name: Get the remote kubeconfig
  ansible.builtin.slurp:
    src: "{{ root_path }}/auth/kubeconfig"
  register: kubeconfig
  ignore_errors: true
  no_log: true
  when: vault_uri is defined

- name: Check if kubeconfig changed so we can update it in case of need
  ansible.builtin.set_fact:
    kubeconfig_to_upload: "{{ kubeconfig['content'] != result.secrets[0].secret }}"
  when: kubeconfig is not failed and result.secrets | length == 1
  no_log: true
- name: Check if no kubeconfig uploaded yet so we can upload
  ansible.builtin.set_fact:
    kubeconfig_to_upload: true
  when: kubeconfig is not failed and result.secrets | length == 0
- name: No kubeconfig found, nothing to upload
  ansible.builtin.set_fact:
    kubeconfig_to_upload: false
  when: kubeconfig is failed

- name: Upload kubeconfig to Azure KeyVault when needed
  azure.azcollection.azure_rm_keyvaultsecret:
    secret_name: "acm-sre-{{ ocp4_metadata.clusterName }}-kubeconfig" # pragma: allowlist secret
    secret_value: "{{ kubeconfig['content'] }}" # Base 64 encoded
    keyvault_uri: "{{ vault_uri }}"
    content_type: "Cluster-admin kubeconfig for the OCP4 cluster named {{ ocp4_metadata.clusterName }}"
    tags:
      owner: "acm-sre"
      kubeconfig: "yes"
      clustername: "{{ ocp4_metadata.clusterName }}"
  when: vault_uri is defined and kubeconfig_to_upload
  delegate_to: localhost
