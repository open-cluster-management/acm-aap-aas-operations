---

- name: Validate ENV variable
  fail:
    msg: "Required variable ENV has not been provided"
  when: (ENV is undefined) or (ENV| length == 0)

- name: Validate {{ ENV }} deployment variables
  fail:
    msg: "Required variable {{ item }} has not been provided for {{ ENV }} deployment"
  when:
    - ENV != "local"
    - (vars[item] is undefined) or (vars[item]| length == 0)
  loop:
    - VAULT_ADDRESS
    - VAULT_TOKEN

- name: Validate local deployment variables
  fail:
    msg: "Required variable {{ item }} has not been provided for local deployment"
  when:
    - ENV == "local"
    - (vars[item] is undefined) or (vars[item]| length == 0)
  loop:
    - PULL_SECRET
    - S3_BUCKET_NAME
    - S3_ENDPOINT
    - AWS_ACCESS_KEY
    - AWS_SECRET_KEY
    - SLACK_API_URL

- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: -temp
  register: tempdir

- name: Install a list of packages with a list variable
  yum:
    name: "{{ packages }}"
  vars:
    packages:
      - git

- name: Git checkout repo to remote bastion
  ansible.builtin.git:
    repo: "{{ acm_repo }}"
    version: "{{ acm_repo_version }}"
    dest: "{{ tempdir.path }}/acm-aap-aas-operations"

- set_fact:
    working_dir: "{{ tempdir.path }}/acm-aap-aas-operations"

- name: Update argocd configuration
  template:
    src: argocd.yaml.j2
    dest: "{{ working_dir }}/cluster-bootstrap/openshift-gitops/config/argocd.yaml"

- name: Apply openshift-gitops subscription
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - "{{ working_dir }}/cluster-bootstrap/openshift-gitops/deploy/subscription.yaml"

- name: Wait namespace openshift-gitops is created
  kubernetes.core.k8s_info:
    kind: Namespace
    wait: true
    name: openshift-gitops
    namespace: openshift-gitops
    wait_sleep: 5
    wait_timeout: 30

- name: Wait all pods to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    namespace: openshift-gitops
    wait_sleep: 10
    wait_timeout: 300

- name: Apply the openshift-gitops configuration
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  loop:
    - "{{ working_dir }}/cluster-bootstrap/openshift-gitops/config/argocd.yaml"
    - "{{ working_dir }}/cluster-bootstrap/openshift-gitops/config/repository.yaml"
    - "{{ working_dir }}/cluster-bootstrap/openshift-gitops/config/rolebinding.yaml"

- name: Wait for openshift-gitops pods to come up
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: openshift-gitops
  register: pod_list
  until: pod_list|json_query('resources[*].status.phase')|unique == ["Running"]
  retries: 15
  delay: 10

- name: Create open-cluster-management namespace for local deployment
  kubernetes.core.k8s:
    name: open-cluster-management
    api_version: v1
    kind: Namespace
    state: present
  when:
    ENV == 'local'

- name: Create open-cluster-management-observability namespace for local deployment
  kubernetes.core.k8s:
    name: open-cluster-management-observability
    api_version: v1
    kind: Namespace
    state: present
  when:
    ENV == 'local'

- name: Create ACM pull secret for local deployment
  kubernetes.core.k8s:
    state: present
    template: 'multiclusterhub-operator-pull-secret.yaml.j2'
  when:
    ENV == 'local'

- name: Create thanos storage secret for local deployment
  kubernetes.core.k8s:
    state: present
    template: 'thanos-storage-aws-secret.yaml.j2'
  when:
    ENV == 'local'

- name: Apply ArgoCD Applications
  kubernetes.core.k8s:
    state: present
    src: "{{ working_dir }}/cluster-bootstrap/argocd-apps/{{ ENV }}/{{ item }}/application.yaml"
  loop:
    - "acm"
    - "multicluster-observability"
    - "grafana-dev"
    - "prometheus-config"
    - "patch-operator"
    - "cert-manager"
    - "cert-manager-config"
    - "openshift-config"

- name: Wait for ACM InstallPlan creation
  kubernetes.core.k8s_info:
    kind: InstallPlan
    api_version: v1alpha1
    namespace: open-cluster-management
  register: acm_installPlan
  until:
    - acm_installPlan.resources.0 is defined
  retries: 15
  delay: 20

- name: Approve the ACM InstallPlan
  kubernetes.core.k8s:
    api_version: v1alpha1
    kind: InstallPlan
    namespace: open-cluster-management
    name: "{{ acm_installPlan.resources.0.metadata.name }}"
    definition: |
      spec:
       approved: true

- name: Apply ArgoCD Applications for {{ ENV }} environment
  kubernetes.core.k8s:
    state: present
    src: "{{ working_dir }}/cluster-bootstrap/argocd-apps/{{ ENV }}/{{ item }}/application.yaml"
  loop:
    - "group-sync"
    - "sso"
    - "alertmanager-to-github"
    - "argocd"
  when:
    ENV != 'local'

- name: Wait for ACM Route creation
  kubernetes.core.k8s_info:
    kind: Route
    name: multicloud-console
    namespace: open-cluster-management
  register: acm_route
  until:
    - acm_route.resources.0 is defined
    - acm_route.resources.0.status.ingress.0.conditions.0.type == 'Admitted'
  retries: 20
  delay: 20

- name: Wait for MCO Route creation
  kubernetes.core.k8s_info:
    kind: Route
    name: alertmanager
    namespace: open-cluster-management-observability
  register: mco_route
  until:
    - mco_route.resources.0 is defined
    - mco_route.resources.0.status.ingress.0.conditions.0.type == 'Admitted'
  retries: 15
  delay: 20

- set_fact:
    acm_console_url: "{{ acm_route.resources.0.spec.host }}"
    mco_console_url: "{{ mco_route.resources.0.spec.host }}"

- name: Create a console-url secret
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      stringData:
        ACM_CONSOLE_URL: "{{ acm_console_url }}"
        ALERTMANAGER_URL: "{{ mco_console_url }}"
      kind: Secret
      metadata:
        name: console-url
        namespace: openshift-gitops
      type: Opaque

- name: Config Alert Manager for {{ ENV }} environment
  kubernetes.core.k8s:
    state: present
    src: "{{ working_dir }}/cluster-bootstrap/argocd-apps/{{ ENV }}/{{ item }}/application.yaml"
  loop:
    - "alert-manager-config"
  when:
    ENV != 'local'

- name: Config Alert Manager for local deployment
  kubernetes.core.k8s:
    state: present
    template: 'app-alertmanager-config.yaml.j2'
  when:
    ENV == 'local'

- name: Use the registered var and the file module to remove the temporary file
  ansible.builtin.file:
    path: "{{ tempdir.path }}"
    state: absent
  when: tempdir.path is defined
