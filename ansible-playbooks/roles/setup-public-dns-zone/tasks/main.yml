- name: Check whether variables are defined
  ansible.builtin.fail:
    msg: "{{ item }} var not defined!"
  when: (vars[item] is undefined) or (vars[item]| length == 0)
  with_items:
    - "cluster_name"
    - "azure_dns_zone"
    - "azure_resource_group"
    - "azure_cluster_resource_group"
- name: Check whether variables are defined
  ansible.builtin.fail:
    msg: "{{ item }} var not defined!"
  when: dns_zone_creation and (vars[item] is undefined) or (vars[item]| length == 0)
  with_items:
    - "parent_dns_zone"
    - "parent_dns_zone_resource_group"

- name: Ensure parent DNS zone exists
  azure_rm_dnszone_info:
    name: "{{ parent_dns_zone }}"
    resource_group: "{{ parent_dns_zone_resource_group }}"
  when: dns_zone_creation
  register: parent_dnszone_result
- name: Ensure parent DNS zone exists
  ansible.builtin.fail:
    msg: "{{ parent_dns_zone }} missing!"
  when: dns_zone_creation and parent_dnszone_result.dnszones | length == 0
- name: Create a Public DNS Zone
  azure_rm_dnszone:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ cluster_name }}.{{ parent_dns_zone }}"
  when: dns_zone_creation
  register: dnszone_result

- name: Transform NS list into dictionary
  set_fact:
    delegated_zone_ns: "{{ delegated_zone_ns + ([{'entry': item}]) }}"
  with_items: "{{ dnszone_result.state.name_servers }}"
  when: dns_zone_creation
- name: Print the resulting dictionary
  debug:
    var: delegated_zone_ns
    verbosity: 1
  when: dns_zone_creation

- name: Ensure Zone delegation by setting NS records in parent zone
  azure_rm_dnsrecordset:
    resource_group: "{{ parent_dns_zone_resource_group }}"
    relative_name: "{{ cluster_name }}"
    zone_name: "{{ parent_dns_zone }}"
    record_type: NS
    time_to_live: 300
    records: "{{ delegated_zone_ns }}"
  when: dns_zone_creation

- name: Ensure child DNS zone exists
  azure_rm_dnszone_info:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ cluster_name }}.{{ parent_dns_zone }}"
  register: child_dnszone_result
- name: Ensure child DNS zone exists
  ansible.builtin.fail:
    msg: "{{ cluster_name }}.{{ parent_dns_zone }} missing!"
  when: child_dnszone_result.dnszones | length == 0
- name: Get bastion public IP
  azure_rm_publicipaddress_info:
    resource_group: "{{ azure_resource_group }}"
    name: bastion01
  register: bastion_ip
- name: Get *.apps IP
  azure_rm_privatednsrecordset_info:
    resource_group: "{{ azure_cluster_resource_group }}"
    relative_name: "*.apps"
    zone_name: "{{ cluster_name }}.{{ azure_dns_zone }}"
    record_type: A
  register: apps_ip
- name: Get api IP
  azure_rm_privatednsrecordset_info:
    resource_group: "{{ azure_cluster_resource_group }}"
    relative_name: "api"
    zone_name: "{{ cluster_name }}.{{ azure_dns_zone }}"
    record_type: A
  register: api_ip
- name: Fail if we didn't find any of those IPs
  ansible.builtin.fail:
    msg: "Couldn't find the IPs does not exist"
  when: (apps_ip.dnsrecordsets | length == 0) or (api_ip.dnsrecordsets | length == 0) or (bastion_ip.publicipaddresses | length == 0)
- ansible.builtin.set_fact:
    ips:
      "*.apps": "{{ apps_ip.dnsrecordsets[0].records[0].ipv4_address }}"
      api: "{{ api_ip.dnsrecordsets[0].records[0].ipv4_address }}"
      bastion: "{{ bastion_ip.publicipaddresses[0].ip_address }}"

- name: ensure an "A" record is set for the the OCP4 IPs
  azure_rm_dnsrecordset:
    resource_group: "{{ azure_resource_group }}"
    relative_name: "{{ item.key }}"
    zone_name: "{{ cluster_name }}.{{ parent_dns_zone }}"
    record_type: A
    time_to_live: 300
    records:
      - entry: "{{ item.value }}"
  loop: "{{ ips | dict2items }}"
